import{_ as s,o as e,c as n,Q as l}from"./chunks/framework.00e71275.js";const h=JSON.parse('{"title":"使用 Docker 部署前端项目","description":"使用 Docker 部署前端项目","frontmatter":{"head":[["meta",{"name":"description","content":"使用 Docker 部署前端项目"}],["meta",{"name":"keywords","content":"使用 Docker 部署前端项目"}],["script",{"src":"https://vitepress-source.oss-cn-beijing.aliyuncs.com/statistics.js"}]]},"headers":[],"relativePath":"article/前端工程化/Docker部署前端项目.md","filePath":"article/前端工程化/Docker部署前端项目.md","lastUpdated":1668262405000}'),a={name:"article/前端工程化/Docker部署前端项目.md"},o=l(`<h1 id="使用-docker-部署前端项目" tabindex="-1">使用 Docker 部署前端项目 <a class="header-anchor" href="#使用-docker-部署前端项目" aria-label="Permalink to &quot;使用 Docker 部署前端项目&quot;">​</a></h1><h2 id="环境的部署" tabindex="-1">环境的部署 <a class="header-anchor" href="#环境的部署" aria-label="Permalink to &quot;环境的部署&quot;">​</a></h2><p>docker 相当于是一个容器，docker 是运行在服务器上的，有它在可以让我们在这个 docker 的大环境下安装一些小环境，电脑相当于我们的手机，docker 相当于我们的微信，nginx 等等镜像就相当于是微信里面的一个个小程序。</p><h3 id="学习-dokcer-之前需要明白的一些知识" tabindex="-1">学习 dokcer 之前需要明白的一些知识 <a class="header-anchor" href="#学习-dokcer-之前需要明白的一些知识" aria-label="Permalink to &quot;学习 dokcer 之前需要明白的一些知识&quot;">​</a></h3><ul><li>基础的 Linux 命令<br><code>mv oldname newname</code> 修改文件名<br><code>ls</code> 查看当前的目录下的文件<br><code>cd 文件名</code> 进入指定文件夹 <code>cd ..</code>返回上一级<br><code>mkdir 文件名</code> 创建文件夹<br><code>rm -rf 文件名</code> 删除指定文件<br><code>cat 文件名</code> 查看文件内容<br><code>touch 文件名</code> 创建指定文件<br><code>vi 文件名</code> 进入文件内部 可以再输入 i 进入修改模式，修改完成后输入按下 Esc 键+:wq 保存并退出</li></ul><h2 id="需要前期的准备" tabindex="-1">需要前期的准备 <a class="header-anchor" href="#需要前期的准备" aria-label="Permalink to &quot;需要前期的准备&quot;">​</a></h2><ul><li>一台属于自己的服务器（推荐阿里云上购买）</li><li>window 环境下安装一个 xshell 软件（用于连接服务器）</li></ul><h3 id="服务器的购买" tabindex="-1">服务器的购买 <a class="header-anchor" href="#服务器的购买" aria-label="Permalink to &quot;服务器的购买&quot;">​</a></h3><blockquote><p>服务器可以就在阿里云上购买一个即可，注意如果有条件就直接买一个就豪，如果是学生还可以买一个学生机(我买的就是-9.5 元一个月)</p></blockquote><p>购买了之后可以在控制台的地方设置了一下多开放几个服务器的端口，阿里云的服务器默认只开启了三个端口，分别是</p><ol><li>端口 80：HTTP 默认端口</li><li>端口 443：HTTPS 默认端口</li><li>端口 22： SSH 端口</li></ol><p><img src="https://img-blog.csdnimg.cn/20200811232112592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI0MDE2Mg==,size_16,color_FFFFFF,t_70" alt="像这样多开放几个端口即可"></p><h3 id="环境安装" tabindex="-1">环境安装 <a class="header-anchor" href="#环境安装" aria-label="Permalink to &quot;环境安装&quot;">​</a></h3><blockquote><p>我们需要安装 docker 环境,nginx 环境，node 环境</p></blockquote><ul><li><p>进入 Xshell 软件，先根据阿里云上的服务器信息输入到软件上，连接上服务器。</p></li><li><p>docker 环境</p><ol><li><p>安装 docker</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> $ sudo yum install docker-ce docker-ce-cli containerd.io</span></span>
<span class="line"><span style="color:#e1e4e8;"> // 如果提示您接受 GPG 密钥，请选是</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> $ sudo yum install docker-ce docker-ce-cli containerd.io</span></span>
<span class="line"><span style="color:#24292e;"> // 如果提示您接受 GPG 密钥，请选是</span></span></code></pre></div></li><li><p>检测是否安装成功 docker</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">  // sudo systemctl start 是运行系统程序 如运行mysql sudo systemctl start mysql</span></span>
<span class="line"><span style="color:#e1e4e8;">  $ sudo systemctl start docker</span></span>
<span class="line"><span style="color:#e1e4e8;">  // 通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community 。</span></span>
<span class="line"><span style="color:#e1e4e8;">  $ sudo docker run hello-world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">  // sudo systemctl start 是运行系统程序 如运行mysql sudo systemctl start mysql</span></span>
<span class="line"><span style="color:#24292e;">  $ sudo systemctl start docker</span></span>
<span class="line"><span style="color:#24292e;">  // 通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community 。</span></span>
<span class="line"><span style="color:#24292e;">  $ sudo docker run hello-world</span></span></code></pre></div></li><li><p>将 docker 设置为开机自启动</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/*</span></span>
<span class="line"><span style="color:#e1e4e8;">	sudo systemctl enable/disable 服务名</span></span>
<span class="line"><span style="color:#e1e4e8;">		这个是个 linux 命令 后面的服务名可以是系统的服务 如 mysql nginx 等等</span></span>
<span class="line"><span style="color:#e1e4e8;">*/</span></span>
<span class="line"><span style="color:#e1e4e8;">sudo systemctl enable docker  // 设置自启动</span></span>
<span class="line"><span style="color:#e1e4e8;">sudo systemctl disable docker  // 关闭自启动</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">/*</span></span>
<span class="line"><span style="color:#e1e4e8;">	sudo systemctl list-unit-files 查看系统服务信息</span></span>
<span class="line"><span style="color:#e1e4e8;">	sudo systemctl list-unit-files | grep docker  查看docker的服务信息</span></span>
<span class="line"><span style="color:#e1e4e8;">	sudo systemctl list-unit-files | grep enable  查看系统自启动的服务有哪些</span></span>
<span class="line"><span style="color:#e1e4e8;">		| 管道符是用于过滤的，可以参考vue的过滤器的语法</span></span>
<span class="line"><span style="color:#e1e4e8;">*/</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">sudo systemctl list-unit-files | grep docker</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/*</span></span>
<span class="line"><span style="color:#24292e;">	sudo systemctl enable/disable 服务名</span></span>
<span class="line"><span style="color:#24292e;">		这个是个 linux 命令 后面的服务名可以是系统的服务 如 mysql nginx 等等</span></span>
<span class="line"><span style="color:#24292e;">*/</span></span>
<span class="line"><span style="color:#24292e;">sudo systemctl enable docker  // 设置自启动</span></span>
<span class="line"><span style="color:#24292e;">sudo systemctl disable docker  // 关闭自启动</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">/*</span></span>
<span class="line"><span style="color:#24292e;">	sudo systemctl list-unit-files 查看系统服务信息</span></span>
<span class="line"><span style="color:#24292e;">	sudo systemctl list-unit-files | grep docker  查看docker的服务信息</span></span>
<span class="line"><span style="color:#24292e;">	sudo systemctl list-unit-files | grep enable  查看系统自启动的服务有哪些</span></span>
<span class="line"><span style="color:#24292e;">		| 管道符是用于过滤的，可以参考vue的过滤器的语法</span></span>
<span class="line"><span style="color:#24292e;">*/</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">sudo systemctl list-unit-files | grep docker</span></span></code></pre></div></li></ol><p>CentOS8 安装 Docker 出现 package docker-ce-3:19.03.8-3.el7.x86_64 requires containerd.io &gt;= 1.2.2-3（没有报错这一步就不需要执行）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">  centos8默认使用podman代替docker，所以需要containerd.io，那我们就安装一下就好了</span></span>
<span class="line"><span style="color:#e1e4e8;">  yum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">  centos8默认使用podman代替docker，所以需要containerd.io，那我们就安装一下就好了</span></span>
<span class="line"><span style="color:#24292e;">  yum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm</span></span></code></pre></div><ol start="3"><li>docker 常用指令集合 <ul><li><code>docker images</code>查看已有的镜像</li><li><code>docker rmi -f 镜像名 </code>删除指定镜像，如<code>docker rmi -f mysql</code>删除 mysql 镜像</li><li><code>docker run 镜像名</code>相当于是启动一个镜像</li><li><code>docker ps</code>查询所有在运行的容器，<code>docker ps -a</code>所有的容器（不管在不在运行）</li><li><code>docker stop 容器名</code>关闭某个执行的容器</li><li><code>docker restart 容器名/id名</code>重新开启某个容器</li><li><code>docker rm $(docker ps -a -q)</code>一次性删除所有无用的容器</li></ul></li></ol></li><li><p>基于 docker 安装 nginx 镜像</p><blockquote><p>docker 相当于我们生活中使用的我微信，nginx 镜像相当于是一个小程序，我们可以直接在 docker 上安装 nginx 镜像来实现 nginx 的功能</p></blockquote><ul><li>使用<code>docker search nginx</code> 查询 nginx 镜像</li><li>使用<code>docker pull nginx</code> 下载镜像</li><li>使用<code>docker images</code> 查看是否有拉取的镜像</li></ul><p><img src="https://img-blog.csdnimg.cn/20200814212426275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI0MDE2Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="nginx镜像"></p><ul><li>开启容器</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">  docker run -d -p 8080:80 --name 容器名 nginx 开启一个容器</span></span>
<span class="line"><span style="color:#e1e4e8;">  /*</span></span>
<span class="line"><span style="color:#e1e4e8;">    -d 表示后台运行 就算关闭了这个窗口，服务器后台任然在运行</span></span>
<span class="line"><span style="color:#e1e4e8;">    -p 端口映射 冒号前是本机端口(自己设置)，冒号后是容器端口(默认是80)</span></span>
<span class="line"><span style="color:#e1e4e8;">  */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">  docker run -d -p 8080:80 --name 容器名 nginx 开启一个容器</span></span>
<span class="line"><span style="color:#24292e;">  /*</span></span>
<span class="line"><span style="color:#24292e;">    -d 表示后台运行 就算关闭了这个窗口，服务器后台任然在运行</span></span>
<span class="line"><span style="color:#24292e;">    -p 端口映射 冒号前是本机端口(自己设置)，冒号后是容器端口(默认是80)</span></span>
<span class="line"><span style="color:#24292e;">  */</span></span></code></pre></div><ul><li>浏览器检查是否成功安装，输入服务器公网地址+自己设置的端口(这里的端口必须是已经开放的端口，就是之前阿里云控制台设置的)，如果浏览器出现以下的显示，恭喜，nginx 启动成功</li></ul><p><img src="https://img-blog.csdnimg.cn/20200811131211344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI0MDE2Mg==,size_16,color_FFFFFF,t_70" alt="nginx默认页面"></p><ul><li>使用<code>docker ps</code>查看已经开启的容器，<code>docker ps -a</code>查看所有的容器</li></ul><p><img src="https://img-blog.csdnimg.cn/20200814213300616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI0MDE2Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="查看容器"></p><ul><li>使用<code>docker stop 容器名/id</code> 停止掉指定的容器</li></ul></li><li><p>创建本机实例文件夹</p><blockquote><p>这个步骤很重要，相当于是处理 nginx 文件映射的功能，类似于 Vue 的 v-model 层，我们映射了 nginx 层的文件夹，我们需要修改 nginx 里面的数据的时候，就可以不同每次都进入 nginx，修改数据，再退出，直接通过修改映射层的数据，会自动的同步到 nginx 里面，非常的方便。</p></blockquote><ul><li><p>/home 文件夹下新建 mutou 文件夹，木头文件夹下新建 nginx 文件夹，nginx 文件夹下新建 conf.d 文件夹，html 文件夹，大致结构如下：</p><p><img src="https://img-blog.csdnimg.cn/20200811172447883.png" alt="映射文件解构"></p></li><li><p>在我们创建的 conf.d 文件夹下新建 default.conf 文件，做出如下的一些配置:</p><p><img src="https://img-blog.csdnimg.cn/20200811172400164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI0MDE2Mg==,size_16,color_FFFFFF,t_70" alt="映射conf.d配置文件"></p></li><li><p>在 html 文件夹下编写我们刚刚修改之后的指定的 html 文件，如我将原有的 index-test.html 修改成了 index-test.html，所以我就要在 html 文件夹下创建一个 index-test.html 文件</p><p><img src="https://img-blog.csdnimg.cn/2020081117270767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI0MDE2Mg==,size_16,color_FFFFFF,t_70" alt="文件"></p></li><li><p>启动我们的 nginx 容器，同时映射地址:代码为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker run -d -p 80:80 -v /home/mutou/nginx/conf.d:/etc/nginx/conf.d  -v /home/mutou/nginx/html:/usr/share/nginx/html nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker run -d -p 80:80 -v /home/mutou/nginx/conf.d:/etc/nginx/conf.d  -v /home/mutou/nginx/html:/usr/share/nginx/html nginx</span></span></code></pre></div><p><img src="https://img-blog.csdnimg.cn/20200811173209475.png" alt="信息"></p></li><li><p>在上述的步骤完成之后，我们输入 ip:80，就可以得到我们刚刚写的 html 代码的页面了</p><p><img src="https://img-blog.csdnimg.cn/20200811173342941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI0MDE2Mg==,size_16,color_FFFFFF,t_70" alt="修改配置后的浏览器显示效果"></p></li></ul></li><li><p>在服务器上安装 git</p><ul><li><p>使用<code>yum install -y git</code>在服务器上安装，之后使用<code>git --version</code>查看版本，如果有就代表安装成了</p><p><img src="https://img-blog.csdnimg.cn/20200812145927643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI0MDE2Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>安装好了之后做一些 git 的简单配置</p><ol><li>git config --global user.name &quot;Your Name&quot;</li><li>git config --global user.email &quot;<a href="mailto:email@example.com" target="_blank" rel="noreferrer">email@example.com</a>&quot;</li><li>ssh-keygen -t rsa -C &quot;<a href="mailto:youremail@example.com" target="_blank" rel="noreferrer">youremail@example.com</a>&quot; 生成公钥和私钥，之后一路回车</li></ol></li></ul></li><li><p>在服务器上安装 node,npm 环境</p><blockquote><p>这一步的操作主要是为了能够实现自动部署，就相当于将整个项目都放在服务器上，在服务器上执行<code>npm run build</code>,有好处也有不好的地方，好处就是十分的方便，可以自动部署，可以配置自动配合 git 拉去 github 的代码，拉取到之后自动重新打包，打包之后自动将 dist 文件夹替换并且自动重启 nginx。就是会消耗服务器的资源，占用比较大的空间。</p></blockquote><ul><li><p><code>wget https://nodejs.org/dist/v9.3.0/node-v9.3.0-linux-x64.tar.xz</code>为服务器安装 node</p></li><li><p><code>tar -xvf node-v9.3.0-linux-x64.tar.xz</code>解压安装包</p></li><li><p>部署 bin 文件，<code>ln -s ~/node-v9.3.0-linux-x64/bin/node /usr/bin/node</code>,<code>ln -s ~/node-v9.3.0-linux-x64/bin/npm /usr/bin/npm</code>(这步骤的路径很重要，路径不对就翻车) bin 文件配置好了之后可以分别执行 node -v 和 npm-v 如果有给出版本号说明安装成功了 node</p></li><li><p>如果我们一旦不小心路径写错想再重新映射路径的时候就会报<code>File exists</code>,这时候我们只需要将正确的看一下路径，并将原来的设置路径的指令的<code>-s</code>改成<code>-sf</code>就可以完后才能覆盖</p></li><li><p>之后就和在电脑里面的操作一样了，npm instll npm run build</p></li><li><p>安装其他的开发工具，如 cnpm、pm2、nodemon 等等也是一样就可以使用 npm 来装了，装完之后也是一样要配置好 bin 文件，路径也是不能错，只有配置成功之后这些指令我们才能够全局的使用。</p></li></ul></li></ul><h2 id="将项目挂在挂在在服务器上-项目部署" tabindex="-1">将项目挂在挂在在服务器上(项目部署) <a class="header-anchor" href="#将项目挂在挂在在服务器上-项目部署" aria-label="Permalink to &quot;将项目挂在挂在在服务器上(项目部署)&quot;">​</a></h2><blockquote><p>到这步就很简单了，离成功就一步之遥了，只需要将项目打包之后的文件夹丢到 nginx 上就可以了。<br> 因为我们服务器安装了 git，所以对于前端来说，我们只需要将前端 vue 项目执行了打包命令之后的 dist 文件夹给传到服务器上，再在服务器上开一个端口来专门处理这个 dist 文件夹就可以了 -- 这里拿 Vue 项目来演示</p></blockquote><pre><code>![打包后的dist文件夹](https://img-blog.csdnimg.cn/20200812163429191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI0MDE2Mg==,size_16,color_FFFFFF,t_70#pic_center)
</code></pre><ul><li><p>之后执行指令<code>docker run -d -p 8080:80 -v $PWD/dist:/usr/share/nginx/html nginx</code>这里注意<code>$PWD</code>表示的是当前所在目录，所以执行这一行代码的时候，我们就必须得在项目的目录中了。</p></li><li><p>执行<code>docker ps</code>如果有我们刚刚那个项目，则部署成功，访问 ip：端口号,就可以线上访问我们的项目了</p><p><img src="https://img-blog.csdnimg.cn/20200814214922208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjI0MDE2Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="项目创建成功"></p></li></ul><h2 id="项目部署优化-半自动部署" tabindex="-1">项目部署优化(半自动部署) <a class="header-anchor" href="#项目部署优化-半自动部署" aria-label="Permalink to &quot;项目部署优化(半自动部署)&quot;">​</a></h2><blockquote><p>到这里项目部署流程基本已经明白了，服务器在 github 上拉去代码，打包，之后开放端口放打包后的文件夹。如果一天文件修改 10 次，那么这个动作就非常的麻烦，所以我们可以配置半自动部署</p></blockquote><ul><li><p>在项目中添加一个服务器的.sh 脚本文件，并放入以下代码</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> # 拉去代码</span></span>
<span class="line"><span style="color:#e1e4e8;"> git pull</span></span>
<span class="line"><span style="color:#e1e4e8;"> # 安装依赖并打包项目</span></span>
<span class="line"><span style="color:#e1e4e8;"> cnpm install &amp;&amp; cnpm run build</span></span>
<span class="line"><span style="color:#e1e4e8;"> # 关闭容器和端口</span></span>
<span class="line"><span style="color:#e1e4e8;"> docker rm -f myblog &amp;&gt; /dev/null</span></span>
<span class="line"><span style="color:#e1e4e8;"> # 重启容器和端口</span></span>
<span class="line"><span style="color:#e1e4e8;"> docker run -d --restart=on-failure:5\\</span></span>
<span class="line"><span style="color:#e1e4e8;">  -p 80:80 \\</span></span>
<span class="line"><span style="color:#e1e4e8;">  -v $PWD/public:/usr/share/nginx/html \\</span></span>
<span class="line"><span style="color:#e1e4e8;">  --name myblog nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> # 拉去代码</span></span>
<span class="line"><span style="color:#24292e;"> git pull</span></span>
<span class="line"><span style="color:#24292e;"> # 安装依赖并打包项目</span></span>
<span class="line"><span style="color:#24292e;"> cnpm install &amp;&amp; cnpm run build</span></span>
<span class="line"><span style="color:#24292e;"> # 关闭容器和端口</span></span>
<span class="line"><span style="color:#24292e;"> docker rm -f myblog &amp;&gt; /dev/null</span></span>
<span class="line"><span style="color:#24292e;"> # 重启容器和端口</span></span>
<span class="line"><span style="color:#24292e;"> docker run -d --restart=on-failure:5\\</span></span>
<span class="line"><span style="color:#24292e;">  -p 80:80 \\</span></span>
<span class="line"><span style="color:#24292e;">  -v $PWD/public:/usr/share/nginx/html \\</span></span>
<span class="line"><span style="color:#24292e;">  --name myblog nginx</span></span></code></pre></div></li><li><p>在加入代码之后，我们前端只需要更新将代码传到 github 上，服务端要做的就减少到进入项目目录，使用 <code>sh 脚本名</code> 执行这个脚本就行了，节省了相当复杂的一些操作</p></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>只要一步一步的执行应该是不会翻车的，如果翻车了可以在主页加我 QQ 一起讨论一下。项目部署中当然不止只有这么点东西，比如反向代理，负载均衡这篇文章都没有涉及到，我也还在学习中。等学明白了也会更新的。</p>`,24),p=[o];function c(i,t,r,d,m,u){return e(),n("div",null,p)}const k=s(a,[["render",c]]);export{h as __pageData,k as default};
