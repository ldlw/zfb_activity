import{_ as s,o as e,c as a,Q as p}from"./chunks/framework.00e71275.js";const y=JSON.parse('{"title":"Linux 常用命令","description":"Linux 常用命令","frontmatter":{"head":[["meta",{"name":"description","content":"Linux 常用命令"}],["meta",{"name":"keywords","content":"Linux"}],["script",{"src":"https://vitepress-source.oss-cn-beijing.aliyuncs.com/statistics.js"}]]},"headers":[],"relativePath":"article/其他技术/Linux命令大全.md","filePath":"article/其他技术/Linux命令大全.md","lastUpdated":1667143823000}'),n={name:"article/其他技术/Linux命令大全.md"},l=p(`<h1 id="linux-常用命令" tabindex="-1">Linux 常用命令 <a class="header-anchor" href="#linux-常用命令" aria-label="Permalink to &quot;Linux 常用命令&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>程序员是只会用 <strong>windows</strong> 是不行，因为几乎所有的项目最后部署都是选择部署在 <strong>Linux</strong> 服务器上的，因为其具有 <strong>稳定</strong>、<strong>安全</strong>、<strong>开源</strong> 的特点，比如我的 <strong>windows</strong> 经常死机，但是的一个 1 核 2G 的小水管服务器买来已经一年之久了，就根本没有死机，个人网站部署在上面非常之稳定，这就是 <strong>Linux</strong> 的优势，随着我们水平和段位不断的进阶，是一定会遇到它的，尤其是做后端的大兄弟，一定会用到的！</p><p><strong>Linux</strong> 命令非常之多！我曾经尝试死记硬背，到头就是只记住了 cd😂🤣，正如高中背单词，好记性不如烂笔头，想要记住它们，方法只有一个 ------ <strong>多敲！</strong></p><p>多说两句，我是一个纯种的 <code>terminal</code>党，也确实有因为使用终端敲命令更加酷炫，也更能理解这个系统，所以我强烈建议用<code>terminal</code>，尽量少用图形化的界面，虽然市面上像 <strong>宝塔面板</strong> 一样的工具确实是非常的好用！</p><h2 id="指令大全" tabindex="-1">指令大全 <a class="header-anchor" href="#指令大全" aria-label="Permalink to &quot;指令大全&quot;">​</a></h2><p>作为一个前端程序员，工作中使用 <strong>Linux</strong> 的机会并不多，以下的指令都是我在工作之外部署个人网站时使用到的，会在学到和用到新的以后不断的进行更新。</p><h3 id="系统级别指令" tabindex="-1">系统级别指令 <a class="header-anchor" href="#系统级别指令" aria-label="Permalink to &quot;系统级别指令&quot;">​</a></h3><ul><li><p><code>ssh</code>登录服务器</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ssh root@ip</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ssh root@ip</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226223445111.png" alt="image-20211226223445111"></p></li><li><p><code>passwd</code>修改密码</p><p>只需要输入 <code>passwd</code> 即可，输入一遍旧密码和两遍新密码即可。密码最好复杂。</p></li><li><p><code>uname -a</code>查看系统版本信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">uname -a # 查看系统版本信息</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">uname -a # 查看系统版本信息</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226225232378.png" alt="image-20211226225232378"></p></li><li><p><code>pwd</code>获取当前路径</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">pwd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">pwd</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226223705194.png" alt="image-20211226223705194"></p></li></ul><p><strong>进程相关操作</strong></p><p>使用<code>ps</code>即可获取当前系统正在运行中的进程，知道了这个就理解了 docker 查看运行中的容器为什么是<code>docker ps</code>了，其返回结果包含有:</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>进程 ID</td></tr><tr><td>STAT</td><td>进程状态：S（正在休眠）、R（正在运行）</td></tr><tr><td>TIME</td><td>进程占 CPU 的总时长</td></tr><tr><td>COMMAND</td><td>命令名（如果使用<code>npm run dev</code>开启一个 node 服务，那个 ps 命令对应的 COMMAND 就会是<code>npm run dev</code>）</td></tr></tbody></table><p>命令选项也很多，类比于 docker：</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>ps x</td><td>显示当前用户运行的所有进程</td></tr><tr><td>ps ax</td><td>显示当前系统运行的所有进程（这个包含其他用户）</td></tr><tr><td>ps u</td><td>显示更详细的进程信息</td></tr><tr><td>ps w</td><td>显示命令的全名，而不是只显示一行</td></tr></tbody></table><p>终止进程：</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>kill pid</td><td>直接杀死这个进程</td></tr><tr><td>kill -STOP pid</td><td>让进程暂停，而不是杀死，（仍然会继续暂存在内容，等待重新被开启）</td></tr><tr><td>kill -CONT pid</td><td>开启被暂停的暂存在内存中的进程</td></tr></tbody></table><p>想要体验一下这些进程命令对于我们来说也很简单，我们只需要开启一个 node 服务即可，然后就可以体验一下通过进程命令来强制关闭掉我们的 node 服务。</p><p>有时候我们启动某个服务发现端口被占用了，如果在进程中能发现的话，逻辑上也是可以通过找进程的方式将其关闭，就可以释放端口号了。</p><ul><li><p><code>ifconfig</code>查看网络设备信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ifconfig</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ifconfig</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226223842512.png" alt="image-20211226223842512"></p></li><li><p><code>free</code> 获取内存信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">free # 获取内存的信息 最小单位为kb</span></span>
<span class="line"><span style="color:#e1e4e8;">free -h # 获取内存信息 最小单位为M  这个比较常用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">free # 获取内存的信息 最小单位为kb</span></span>
<span class="line"><span style="color:#24292e;">free -h # 获取内存信息 最小单位为M  这个比较常用</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226224153332.png" alt="image-20211226224153332"></p></li><li><p><code>df -lh</code>获取存储空间（磁盘空间）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">df -lh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">df -lh</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226224431005.png" alt="image-20211226224431005"></p></li><li><p><code>yum</code>安装软件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">yum install mysql # 安装mysql</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">yum install mysql # 安装mysql</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226225537961.png" alt="image-20211226225537961"></p></li><li><p><code>wget</code>下载内容</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">wget https://nodejs.org/dist/v16.13.1/node-v16.13.1-linux-x64.tar.xz # 下载node.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">wget https://nodejs.org/dist/v16.13.1/node-v16.13.1-linux-x64.tar.xz # 下载node.js</span></span></code></pre></div><p>我们可以先在网上找到下载连接，使用 wget+链接 可以实现下载</p><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226230124146.png" alt="image-20211226230124146"></p></li><li><p><code>which</code>查看文件位置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">which nginx # 查看nginx安装位置</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">which nginx # 查看nginx安装位置</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226225745578.png" alt="image-20211226225745578"></p></li><li><p><code>-- help</code>查看帮助手册</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">docker --help # 查看docker的指令大全</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">docker --help # 查看docker的指令大全</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226231311158.png" alt="image-20211226231311158"></p></li><li><p><code>find</code>查找文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">find -name &#39;*.yml&#39; # 查看 .yml结尾的文件所在位置</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">find -name &#39;*.yml&#39; # 查看 .yml结尾的文件所在位置</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226231517981.png" alt="image-20211226231517981"></p></li><li><p><code>nohup</code>后台执行任务</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">nohup node app.js # 后台执行app.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">nohup node app.js # 后台执行app.js</span></span></code></pre></div></li><li><p><code>jobs</code>查看后台执行的任务</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">jobs # 查看后台执行的任务</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">jobs # 查看后台执行的任务</span></span></code></pre></div></li><li><p><code>ps</code>查看后台进程</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ps -ef # 查看后台所有进程</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ps -ef # 查看后台所有进程</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226232915764.png" alt="image-20211226232915764"></p></li><li><p><code>|grep</code> 筛选内容</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ps -ef|grep &#39;docker&#39; # 只筛选出 docker 进程</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ps -ef|grep &#39;docker&#39; # 只筛选出 docker 进程</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226232934363.png" alt="image-20211226232934363"></p></li><li><p><code>netstat</code>查看端口占用</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">netstat -ntlp # 查看端口占用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">netstat -ntlp # 查看端口占用</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226233120885.png" alt="image-20211226233120885"></p></li><li><p><code>history</code>查看历史敲的命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">history</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">history</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226233605944.png" alt="image-20211226233605944"></p></li></ul><h3 id="文件级别指令" tabindex="-1">文件级别指令 <a class="header-anchor" href="#文件级别指令" aria-label="Permalink to &quot;文件级别指令&quot;">​</a></h3><ul><li><p><code>cd</code>更改所在位置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cd .. # 返回上一级</span></span>
<span class="line"><span style="color:#e1e4e8;">cd demo # 进入demo目录</span></span>
<span class="line"><span style="color:#e1e4e8;">cd demo/page # 进入demo目录下的page目录</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cd .. # 返回上一级</span></span>
<span class="line"><span style="color:#24292e;">cd demo # 进入demo目录</span></span>
<span class="line"><span style="color:#24292e;">cd demo/page # 进入demo目录下的page目录</span></span></code></pre></div></li><li><p><code>mkdir</code> 创建目录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mkdir demo # 在当前路径下创建一个dmeo文件夹</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mkdir demo # 在当前路径下创建一个dmeo文件夹</span></span></code></pre></div></li><li><p><code>rmdir </code>删除目录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">rmdir demo # 删除当前目录下的 demo 文件夹</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">rmdir demo # 删除当前目录下的 demo 文件夹</span></span></code></pre></div><p>只有当这个文件夹下是空的时候，这个命令才能删除成功，否则是删除失败，如果想要删除有文件内容的文件夹（目录），则可以使用<code>rm -rf demo</code> 的形式来记性删除</p></li><li><p><code>ls</code> 查看当前目录下文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ls # 查看当前目录下文件（不包含隐藏文件）</span></span>
<span class="line"><span style="color:#e1e4e8;">ls -a # 查看当前目录下文件（包含隐藏文件）</span></span>
<span class="line"><span style="color:#e1e4e8;">ls -l # 显示详细的列表信息（这个更加多的内容）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ls # 查看当前目录下文件（不包含隐藏文件）</span></span>
<span class="line"><span style="color:#24292e;">ls -a # 查看当前目录下文件（包含隐藏文件）</span></span>
<span class="line"><span style="color:#24292e;">ls -l # 显示详细的列表信息（这个更加多的内容）</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226224906205.png" alt="image-20211226224906205"></p></li></ul><p><strong>查看文件信息</strong></p><ul><li><p><code>cat</code>查看文件内容</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cat start.sh # 查看 start.sh 内容</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cat start.sh # 查看 start.sh 内容</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226225118652.png" alt="image-20211226225118652"></p></li><li><p><code>head</code>查看前 10 行内容</p><p><code>head /etc/passwd</code></p><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20220514225602256.png" alt="image-20220514225602256"></p></li><li><p><code>tail</code>查看后 10 行内容</p><p><code>tail /etc/passwd</code></p><p>如果想指定行数，可以使用-n 来设置，如：<code>tail -3 /etc/passed</code></p><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20220514225855188.png" alt="image-20220514225855188"></p></li></ul><p><strong>对文件进行排序</strong></p><ul><li><p><code>tar</code>解压文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">tar -axvf node-v16.13.1-linux-x64.tar.gz # 解压 .tar.gz 格式压缩包</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># 如果解压 .tar.xz 类型文件 需要先将 .tar.xz 转成 .tar</span></span>
<span class="line"><span style="color:#e1e4e8;">xz -d node-v16.13.1-linux-x64.tar.xz # 得到 node-v16.13.1-linux-x64.tar 文件</span></span>
<span class="line"><span style="color:#e1e4e8;">tar -xvf node-v16.13.1-linux-x64.tar # 解压 .tar文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">tar -axvf node-v16.13.1-linux-x64.tar.gz # 解压 .tar.gz 格式压缩包</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># 如果解压 .tar.xz 类型文件 需要先将 .tar.xz 转成 .tar</span></span>
<span class="line"><span style="color:#24292e;">xz -d node-v16.13.1-linux-x64.tar.xz # 得到 node-v16.13.1-linux-x64.tar 文件</span></span>
<span class="line"><span style="color:#24292e;">tar -xvf node-v16.13.1-linux-x64.tar # 解压 .tar文件</span></span></code></pre></div></li><li><p><code>cp</code>复制文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cp ./node-v16.13.1-linux-x64/lib/node_modules/npm/node_modules/node-gyp/.github/workflows/tests.yml ./</span></span>
<span class="line"><span style="color:#e1e4e8;"># 复制 tests.yml 到当前目录下</span></span>
<span class="line"><span style="color:#e1e4e8;"># 这个指令就是 cp 目录1 目录2  把目录1指定文件复制到目录2中</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cp ./node-v16.13.1-linux-x64/lib/node_modules/npm/node_modules/node-gyp/.github/workflows/tests.yml ./</span></span>
<span class="line"><span style="color:#24292e;"># 复制 tests.yml 到当前目录下</span></span>
<span class="line"><span style="color:#24292e;"># 这个指令就是 cp 目录1 目录2  把目录1指定文件复制到目录2中</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226231908240.png" alt="image-20211226231908240"></p></li><li><p><code>mv</code>改文件名</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mv tests.yml demo.yml # 把 demo.yml 更改名为 demo.yml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mv tests.yml demo.yml # 把 demo.yml 更改名为 demo.yml</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20211226231957370.png" alt="image-20211226231957370"></p></li><li><p><code>touch</code>创建文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">touch index.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">touch index.html</span></span></code></pre></div></li><li><p><code>vim</code> 使用编辑器</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">vim app.js # 编辑 app.js 文件</span></span>
<span class="line"><span style="color:#e1e4e8;">i     # 修改模式</span></span>
<span class="line"><span style="color:#e1e4e8;">:wq   # 保存退出</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">vim app.js # 编辑 app.js 文件</span></span>
<span class="line"><span style="color:#24292e;">i     # 修改模式</span></span>
<span class="line"><span style="color:#24292e;">:wq   # 保存退出</span></span></code></pre></div></li><li><p><code>rm -rf</code> 删除命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">rm -rf demo # 删除demo这个文件夹</span></span>
<span class="line"><span style="color:#e1e4e8;">rm -rf /* # 删库跑路</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">rm -rf demo # 删除demo这个文件夹</span></span>
<span class="line"><span style="color:#24292e;">rm -rf /* # 删库跑路</span></span></code></pre></div><p>兄弟们这个命令非常的危险，尤其是删库跑路的那个命令，如果是公司的服务器这样搞一下是要赔很多钱说不定会被告的，千万不要用！！！</p></li><li><p><code>*</code>通配符</p><p><code>*</code>这里类似于正则进行匹配，在 shell 里，<code>*</code>可以代表人和的字符或者数字，所以可以做出以下的一些操作：</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>cat at*</code></td><td>查看所有以 at 开头的文件</td></tr><tr><td><code>rm -rf *.css</code></td><td>删除所有的 css 文件</td></tr><tr><td><code>rm -rf *.temp.*</code></td><td>删除所有的包含 .temp. 的文件</td></tr></tbody></table></li><li><p><code>?</code>通配符</p><p>匹配一个字符，也是正则的概念，只是和 JS 中的正则不太一样，在 linux 中：</p><p>b?at =&gt; 可以成功匹配 boat 或 brat</p></li></ul><p><strong>查找文件</strong></p><ul><li><p><code>find dir -name file</code> 查找文件</p><p>查找 dir 目录下的 file 文件。例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">find ./me -name index.html # 查找me目录下的所有的index.html文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">find ./me -name index.html # 查找me目录下的所有的index.html文件</span></span></code></pre></div><p><img src="https://vitepress-source.oss-cn-beijing.aliyuncs.com/typoraimage-20220514224819845.png" alt="image-20220514224819845"></p></li></ul><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><ul><li><p>centos8 开放端口</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># firewall-cmd --zone=public --add-port=端口/tcp --permanent</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">#开放9999端口</span></span>
<span class="line"><span style="color:#e1e4e8;">firewall-cmd --zone=public --add-port=9999/tcp --permanent</span></span>
<span class="line"><span style="color:#e1e4e8;">#配置立即生效</span></span>
<span class="line"><span style="color:#e1e4e8;">firewall-cmd --reload</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># firewall-cmd --zone=public --add-port=端口/tcp --permanent</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">#开放9999端口</span></span>
<span class="line"><span style="color:#24292e;">firewall-cmd --zone=public --add-port=9999/tcp --permanent</span></span>
<span class="line"><span style="color:#24292e;">#配置立即生效</span></span>
<span class="line"><span style="color:#24292e;">firewall-cmd --reload</span></span></code></pre></div><p>当我们开启一个后端服务的时候向外暴露端口，除了云服务器控制面板里面的端口要开启之外，Linux 服务器自身的端口也需要向外开启暴露才行。</p><p>因为版本升级到 centos8 之后，一些配置和 7.X 的不一样</p></li><li><p>Nginx 反向代理</p><p>修改配置 nginx 的 <strong>default.conf</strong> 文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">server {</span></span>
<span class="line"><span style="color:#e1e4e8;">    listen 80;</span></span>
<span class="line"><span style="color:#e1e4e8;">    server_name 1.116.xxx.xxx;</span></span>
<span class="line"><span style="color:#e1e4e8;">    location / {</span></span>
<span class="line"><span style="color:#e1e4e8;">        proxy_pass http://1.116.xxx.xxx:3000;</span></span>
<span class="line"><span style="color:#e1e4e8;">        proxy_redirect default;</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;">    location ~ /wx/ {</span></span>
<span class="line"><span style="color:#e1e4e8;">        proxy_pass http://1.116.xxx.xxx:9999;</span></span>
<span class="line"><span style="color:#e1e4e8;">        proxy_redirect default;</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">server {</span></span>
<span class="line"><span style="color:#24292e;">    listen 80;</span></span>
<span class="line"><span style="color:#24292e;">    server_name 1.116.xxx.xxx;</span></span>
<span class="line"><span style="color:#24292e;">    location / {</span></span>
<span class="line"><span style="color:#24292e;">        proxy_pass http://1.116.xxx.xxx:3000;</span></span>
<span class="line"><span style="color:#24292e;">        proxy_redirect default;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">    location ~ /wx/ {</span></span>
<span class="line"><span style="color:#24292e;">        proxy_pass http://1.116.xxx.xxx:9999;</span></span>
<span class="line"><span style="color:#24292e;">        proxy_redirect default;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>这样做实现的是</p><ul><li><code>http://1.116.xxx.xxx</code>,请求会发送到<code>http://1.116.xxx.xxx:3000</code></li><li><code>http://1.116.xxx.xxx/wx</code>/,请求会发送到<code>http://1.116.xxx.xxx:9999</code></li></ul></li><li><p>ln配置软链接</p><p>软链接配置相信对于很多前端程序员来说是一个噩梦般的存在，对于我来说是这样的，很痛苦，配置每次都要网上一直查最后才能解决！</p><p>如我们在服务器全局安装了 <code>pnpm</code> ,但是直接输入 <code>pnpm</code> 是会报找不到命令的，这时候我们就需要配置一下软链接才能全局使用指令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ln -s /app/node-v16.13.1-linux-x64/bin/pnpm /usr/bin/pnpm</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ln -s /app/node-v16.13.1-linux-x64/bin/pnpm /usr/bin/pnpm</span></span></code></pre></div><p>这里最关键的地方就是 /app/node-v16.13.1-linux-x64/ 这个路径，这个路径是我们node安装的路径，所以设置软链接的时候一定要找对这个路径，网上很多指令不管用主要原因就是大家node安装的路径都不一样，因为我node装在 /app 目录下，所以就这个指令就行了。</p><p>当我们安装错误，报软链接已存在时，我们可以选择删除这个软链接，执行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">rm /usr/bin/pnpm</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">rm /usr/bin/pnpm</span></span></code></pre></div><p>或者直接覆盖之前的指令，也简单，将原有指令的 -s 改成 -sf</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ln -sf /app/node-v16.13.1-linux-x64/bin/pnpm /usr/bin/pnpm</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ln -sf /app/node-v16.13.1-linux-x64/bin/pnpm /usr/bin/pnpm</span></span></code></pre></div><p>以上便是软链接的基本配置。</p></li></ul>`,29),o=[l];function t(c,i,d,r,g,h){return e(),a("div",null,o)}const m=s(n,[["render",t]]);export{y as __pageData,m as default};
