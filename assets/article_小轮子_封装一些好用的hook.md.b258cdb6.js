import{_ as s,o as a,c as o,Q as t}from"./chunks/framework.00e71275.js";const u=JSON.parse('{"title":"封装一些好用的 hooks","description":"封装一些好用的hooks","frontmatter":{"head":[["meta",{"name":"description","content":"封装一些好用的hooks"}],["meta",{"name":"keywords","content":"react、hooks"}],["script",{"src":"https://vitepress-source.oss-cn-beijing.aliyuncs.com/statistics.js"}]]},"headers":[],"relativePath":"article/小轮子/封装一些好用的hook.md","filePath":"article/小轮子/封装一些好用的hook.md","lastUpdated":1667121428000}'),l={name:"article/小轮子/封装一些好用的hook.md"},e=t(`<h1 id="封装一些好用的-hooks" tabindex="-1">封装一些好用的 hooks <a class="header-anchor" href="#封装一些好用的-hooks" aria-label="Permalink to &quot;封装一些好用的 hooks&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">跟大家安利一个非常好用的 hooks 工具库~~</p><p><a href="https://shiheng-fe.github.io/hooks/use-loading" target="_blank" rel="noreferrer">@shihengtech/hooks</a>，是我现在所在公司的前辈自行封装的一些 hooks，其中的一些 hooks 几乎都是我目前开发的项目中的一些必备的 hooks。</p><p>学习源码，并且自己也封装了一遍，源码在：<a href="https://github.com/ldlw/hooks" target="_blank" rel="noreferrer">hooks</a></p></div><blockquote><p>因为我读源码的能力非常薄弱，大框架的源码几乎很难看懂，所以从小工具库入手学习读源码对我来说是一个非常不错的提示这一块能力的方式，所以决定自己也来在读了源码之后自行封装一下。</p></blockquote><h2 id="uselocalstoragestate" tabindex="-1">useLocalStorageState <a class="header-anchor" href="#uselocalstoragestate" aria-label="Permalink to &quot;useLocalStorageState&quot;">​</a></h2><p>顾名思义，和 useState 一样，会创建一个和 useState 一样的数据结构，这个数据会被保存到浏览器的<code>localStorage</code>中，通过 setSLocalStroage 也能实现页面的渲染。</p><h3 id="用处" tabindex="-1">用处 <a class="header-anchor" href="#用处" aria-label="Permalink to &quot;用处&quot;">​</a></h3><p>因为被存入到了<code>localStorage</code> 中，所以不会像<code>useState</code>这种存入内存中的数据，刷新一下就丢失数据的情况，可以实现整个应用下的数据共享与持久化。</p><h3 id="最终目标" tabindex="-1">最终目标 <a class="header-anchor" href="#最终目标" aria-label="Permalink to &quot;最终目标&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setState</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useLocalStorageState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;LIuWeiKey&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> v</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">state</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setState</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useLocalStorageState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;LIuWeiKey&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(</span><span style="color:#E36209;">v</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> v</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">))</span></span></code></pre></div><h3 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">useLocalStroage</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(key: string, defaultValue</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">)): readonly [</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">, React.Dispatch</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">React.SetStateAction</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">useLocalStroage</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(key: string, defaultValue</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#24292E;">)): readonly [</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">, React.Dispatch</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">React.SetStateAction</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;">];</span></span></code></pre></div><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setState</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useLocalStorageState</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(key: string, defaultValue</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">state</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setState</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useLocalStorageState</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(key: string, defaultValue</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#24292E;">));</span></span></code></pre></div><h3 id="params" tabindex="-1">Params <a class="header-anchor" href="#params" aria-label="Permalink to &quot;Params&quot;">​</a></h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>key</td><td>必填，<code>localStorage</code> 存储的键值对的键值</td><td>string</td><td>-</td></tr><tr><td>defaultValue</td><td>默认值，会优先以 <code>localStorage</code> 中保存的值为准</td><td>any</td><td>()=&gt;any</td></tr></tbody></table>`,15),n=[e];function p(c,r,y,E,i,d){return a(),o("div",null,n)}const g=s(l,[["render",p]]);export{u as __pageData,g as default};
